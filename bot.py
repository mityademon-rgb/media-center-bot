import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import os
from openai import OpenAI
import sqlite3
from datetime import datetime

# –¢–æ–∫–µ–Ω –∏ OpenAI –∫–ª–∏–µ–Ω—Ç
bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN'])
client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

# –ê–¥–º–∏–Ω ID (–≤–∞—à Telegram ID)
ADMIN_ID = 397724997

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite (–±–∞–∑–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤)
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, name TEXT, experience TEXT, interests TEXT)''')
conn.commit()

# ============== –ù–û–í–û–ï: —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π/–æ—á–∫–æ–≤/–∫–≤–∏–∑–æ–≤ ==============
def sql(q, args=(), many=False):
    c = conn.cursor()
    c.execute(q, args)
    conn.commit()
    return c.fetchall() if many else c.fetchone()

def init_weekly_db():
    sql("""CREATE TABLE IF NOT EXISTS weekly_meta(
        key TEXT PRIMARY KEY,
        value TEXT
    )""")
    sql("""CREATE TABLE IF NOT EXISTS weekly_tasks(
        week_id TEXT PRIMARY KEY,
        kind TEXT,                -- 'media' | 'quiz' | 'minitest'
        title TEXT,
        description TEXT,
        media_url TEXT,
        deadline TEXT,
        quiz_q TEXT,
        quiz_a TEXT,
        quiz_b TEXT,
        quiz_c TEXT,
        quiz_correct INTEGER      -- 0,1,2
    )""")
    sql("""CREATE TABLE IF NOT EXISTS weekly_points(
        user_id INTEGER,
        week_id TEXT,
        points INTEGER DEFAULT 0,
        PRIMARY KEY(user_id, week_id)
    )""")
    sql("""CREATE TABLE IF NOT EXISTS weekly_submissions(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        week_id TEXT,
        file_id TEXT,
        file_type TEXT,
        caption TEXT,
        ts TEXT
    )""")
    sql("""CREATE TABLE IF NOT EXISTS weekly_awards(
        user_id INTEGER,
        week_id TEXT,
        type TEXT,                -- 'media','quiz','minitest'
        PRIMARY KEY(user_id, week_id, type)
    )""")
    sql("""CREATE TABLE IF NOT EXISTS weekly_test_states(
        user_id INTEGER,
        week_id TEXT,
        q_index INTEGER DEFAULT 0,
        score INTEGER DEFAULT 0,
        PRIMARY KEY(user_id, week_id)
    )""")

def get_current_week():
    row = sql("SELECT value FROM weekly_meta WHERE key='current_week'")
    return row[0] if row else None

def set_current_week(week_id: str):
    if get_current_week() is None:
        sql("INSERT INTO weekly_meta(key,value) VALUES('current_week',?)", (week_id,))
    else:
        sql("UPDATE weekly_meta SET value=? WHERE key='current_week'", (week_id,))

def upsert_task(week_id, kind, title, description, media_url, deadline):
    row = sql("SELECT week_id FROM weekly_tasks WHERE week_id=?", (week_id,))
    if row:
        sql("""UPDATE weekly_tasks SET kind=?,title=?,description=?,media_url=?,deadline=? WHERE week_id=?""",
            (kind, title, description, media_url, deadline, week_id))
    else:
        sql("""INSERT INTO weekly_tasks(week_id,kind,title,description,media_url,deadline)
               VALUES(?,?,?,?,?,?)""", (week_id, kind, title, description, media_url, deadline))

def set_kind(kind):
    wid = get_current_week()
    if not wid: return False
    sql("UPDATE weekly_tasks SET kind=? WHERE week_id=?", (kind, wid))
    return True

def set_quiz(q, a, b, c, correct_idx):
    wid = get_current_week()
    if not wid: return False
    sql("""UPDATE weekly_tasks SET quiz_q=?,quiz_a=?,quiz_b=?,quiz_c=?,quiz_correct=?
           WHERE week_id=?""", (q, a, b, c, correct_idx, wid))
    return True

def get_task(week_id):
    return sql("""SELECT week_id,kind,title,description,media_url,deadline,
                         quiz_q,quiz_a,quiz_b,quiz_c,quiz_correct
                  FROM weekly_tasks WHERE week_id=?""", (week_id,))

def add_points(user_id, week_id, pts):
    row = sql("SELECT points FROM weekly_points WHERE user_id=? AND week_id=?", (user_id, week_id))
    if row:
        sql("UPDATE weekly_points SET points=points+? WHERE user_id=? AND week_id=?", (pts, user_id, week_id))
    else:
        sql("INSERT INTO weekly_points(user_id,week_id,points) VALUES(?,?,?)", (user_id, week_id, pts))

def get_points(user_id, week_id):
    row = sql("SELECT points FROM weekly_points WHERE user_id=? AND week_id=?", (user_id, week_id))
    return row[0] if row else 0

def already_awarded(user_id, week_id, award_type):
    return sql("SELECT 1 FROM weekly_awards WHERE user_id=? AND week_id=? AND type=?",
               (user_id, week_id, award_type)) is not None

def mark_awarded(user_id, week_id, award_type):
    sql("INSERT OR IGNORE INTO weekly_awards(user_id,week_id,type) VALUES(?,?,?)", (user_id, week_id, award_type))

def top_week(week_id, limit=10):
    return sql("""SELECT user_id, points FROM weekly_points
                  WHERE week_id=?
                  ORDER BY points DESC, user_id ASC
                  LIMIT ?""", (week_id, limit), many=True)

def format_task_text(row):
    _, kind, title, descr, media, deadline, qq, qa, qb, qc, cor = row
    t = [f"üìÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ ({kind or '–Ω–µ –∑–∞–¥–∞–Ω–æ'})\n\nüß© {title or '‚Äî'}\n\n{descr or '‚Äî'}"]
    if media: t.append(f"üîó –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {media}")
    if deadline: t.append(f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline}")
    if kind == 'media':
        t.append("\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é #challenge ‚Äî –∑–∞—á—Ç—ë–º —É—á–∞—Å—Ç–∏–µ (+5 –æ—á–∫–æ–≤ –∑–∞ –ø–µ—Ä–≤–æ–µ).")
    if kind == 'quiz' and qq:
        t.append("\nüß† –ö–≤–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /quiz")
    if kind == 'minitest':
        t.append("\nüìù –ú–∏–Ω–∏-—Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /minitest")
    return "\n".join(t)

# –û—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
POINTS_MEDIA_FIRST = 5
POINTS_QUIZ_RIGHT = 3
POINTS_MINITEST = {3:5, 2:3, 1:1, 0:0}

# –ú–∏–Ω–∏-—Ç–µ—Å—Ç (3 –≤–æ–ø—Ä–æ—Å–∞) ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–±–æ—Ä (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º —Ä–∞—Å—à–∏—Ä—è—Ç—å)
MINITEST_QUESTIONS = [
    ("–ß—Ç–æ —Ç–∞–∫–æ–µ '–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π'?",
     ["A: –°—Ç–∞–≤–∏–º –æ–±—ä–µ–∫—Ç –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è—Ö —Å–µ—Ç–∫–∏ 3x3", "B: –°–Ω–∏–º–∞–µ–º —Ç—Ä–∏ –¥—É–±–ª—è", "C: –í—Å–µ–≥–¥–∞ —Ü–µ–Ω—Ç—Ä"], 'A'),
    ("–ö–∞–∫–æ–π —Å–≤–µ—Ç –¥–µ–ª–∞–µ—Ç –ª–∏—Ü–æ '—Å—Ç—Ä–∞—à–Ω—ã–º'?",
     ["A: –°–±–æ–∫—É", "B: –°–≤–µ—Ä—Ö—É", "C: –°–Ω–∏–∑—É"], 'C'),
    ("–ß—Ç–æ –ª—É—á—à–µ ‚Äî –∑—É–º–∏—Ç—å –∏–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ?",
     ["A: –ó—É–º–∏—Ç—å", "B: –ü–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ", "C: –ù–µ –≤–∞–∂–Ω–æ"], 'B'),
]

def users_all_ids():
    cursor.execute("SELECT user_id FROM users")
    return [r[0] for r in cursor.fetchall()]

init_weekly_db()
# ================================================================================

# –ß–µ–∫-–ª–∏—Å—Ç—ã (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
checklist_text_ai = """
–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω—É–∂–Ω–æ –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–∞–ø–∏—Å–∞–ª–∞ —Ö–æ—Ä–æ—à–∏–π –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –°–ª–µ–¥—É–π —ç—Ç–æ–º—É —á–µ–∫-–ª–∏—Å—Ç—É:

1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
‚úÖ –ß—Ç–æ —ç—Ç–æ –∑–∞ —Å–æ–±—ã—Ç–∏–µ? (–∫–æ–Ω—Ü–µ—Ä—Ç, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –∏–≥—Ä–∞, –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –∏ —Ç.–¥.)
‚úÖ –ö–æ–≥–¥–∞ –∏ –≥–¥–µ –æ–Ω–æ –ø—Ä–æ—à–ª–æ? (–¥–∞—Ç–∞, –≤—Ä–µ–º—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏)
‚úÖ –ö—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä? (—à–∫–æ–ª–∞, –∫–ª—É–±, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã)
‚úÖ –ö—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏? (—É—á–µ–Ω–∏–∫–∏, —É—á–∏—Ç–µ–ª—è, –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –≥–æ—Å—Ç–∏)
‚úÖ –ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å —Å–æ–±—ã—Ç–∏—è? (—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ, –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
–ü—Ä–∏–º–µ—Ä:
"–≠—Ç–æ –±—ã–ª —à–∫–æ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª 15 —Ñ–µ–≤—Ä–∞–ª—è –≤ –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ —à–∫–æ–ª—ã ‚Ññ12. –ï–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª–∏ —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∏ —É—á–∏—Ç–µ–ª—è –º—É–∑—ã–∫–∏. –í –Ω–µ–º —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —É—á–µ–Ω–∏–∫–∏ 5-11 –∫–ª–∞—Å—Å–æ–≤. –ö–æ–Ω—Ü–µ—Ä—Ç –±—ã–ª –ø–æ—Å–≤—è—â–µ–Ω –î–Ω—é –¥—Ä—É–∂–±—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —à–∫–æ–ª—å–Ω–æ–≥–æ –¥—É—Ö–∞."

2. –û–ø–∏—Å–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚úÖ –ö–∞–∫–∞—è –±—ã–ª–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞? (–≤–µ—Å–µ–ª–∞—è, —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –¥—Ä—É–∂–µ—Å–∫–∞—è, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è)
‚úÖ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –Ω–∞ —Å—Ü–µ–Ω–µ –∏–ª–∏ –ø–ª–æ—â–∞–¥–∫–µ? (–∫–∞–∫–∏–µ –Ω–æ–º–µ—Ä–∞, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∏–≥—Ä—ã)
‚úÖ –ö–∞–∫–∏–µ –±—ã–ª–∏ —ç–º–æ—Ü–∏–∏ —É –∑—Ä–∏—Ç–µ–ª–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤? (—Ä–∞–¥–æ—Å—Ç—å, –≤–æ—Å—Ç–æ—Ä–≥, –≤–æ–ª–Ω–µ–Ω–∏–µ)
‚úÖ –ë—ã–ª–∏ –ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–ª–∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è —ç–ø–∏–∑–æ–¥—ã?
–ü—Ä–∏–º–µ—Ä:
"–ó—Ä–∏—Ç–µ–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≤—ã—Å—Ç—É–ø–∞—é—â–∏—Ö –≥—Ä–æ–º–∫–∏–º–∏ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç–∞–º–∏. –û—Å–æ–±–µ–Ω–Ω–æ –≤—Å–µ–º –∑–∞–ø–æ–º–Ω–∏–ª—Å—è –Ω–æ–º–µ—Ä —Å –∂–∏–≤–æ–π –º—É–∑—ã–∫–æ–π, –≥–¥–µ —É—á–µ–Ω–∏–∫–∏ 9 –∫–ª–∞—Å—Å–∞ –∏—Å–ø–æ–ª–Ω–∏–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–µ—Å–Ω—é –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ. –ê –≤ —Ñ–∏–Ω–∞–ª–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—ã—à–ª–∏ –Ω–∞ —Å—Ü–µ–Ω—É –∏ —Å–ø–µ–ª–∏ –ø–µ—Å–Ω—é –æ –¥—Ä—É–∂–±–µ."

3. –ò—Ç–æ–≥–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
‚úÖ –ö–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–ª–æ —Å–æ–±—ã—Ç–∏–µ? (–≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ, –Ω–∞—É—á–∏–ª–æ, —Å–ø–ª–æ—Ç–∏–ª–æ)
‚úÖ –ß—Ç–æ —Å–∫–∞–∑–∞–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏? (—Ü–∏—Ç–∞—Ç—ã, –º–Ω–µ–Ω–∏—è)
‚úÖ –ë—É–¥—É—Ç –ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –±—É–¥—É—â–µ–º?
–ü—Ä–∏–º–µ—Ä:
"–ü–æ —Å–ª–æ–≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤, –∫–æ–Ω—Ü–µ—Ä—Ç –ø–æ–º–æ–≥ —Å–ø–ª–æ—Ç–∏—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–∞—Ä–∏–ª –≤—Å–µ–º —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ú–Ω–æ–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–ª–∏—Å—å, —á—Ç–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–∏–º—É—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–π–¥–µ—Ç –≤–µ—Å–Ω–æ–π."

4. –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–æ–º–ø—Ç–∞
–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –µ–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.
üîπ –§–æ—Ä–º—É–ª–∞ –ø—Ä–æ–º–ø—Ç–∞:
"–ù–∞–ø–∏—à–∏ –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ—Ä–µ–ø–æ—Ä—Ç–∞–∂–∞ –æ [—Ç–∏–ø —Å–æ–±—ã—Ç–∏—è], –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ [–¥–∞—Ç–∞] –≤ [–º–µ—Å—Ç–æ]. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã ‚Äì [–∫—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª]. –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ [–∫—Ç–æ –±—ã–ª]. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –±—ã–ª–∞ [–æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã]. –ü—Ä–æ–∏–∑–æ—à–ª–∏ —Ç–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è: [–∫—Ä–∞—Ç–∫–æ, —á—Ç–æ –±—ã–ª–æ]. –û—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ [–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç]. –í –∫–æ–Ω—Ü–µ [—á–µ–º –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å]. –î–æ–±–∞–≤—å –≤—ã–≤–æ–¥ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –∏ –ø–∞—Ä—É —Ñ—Ä–∞–∑ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
–ü—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:
"–ù–∞–ø–∏—à–∏ –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ—Ä–µ–ø–æ—Ä—Ç–∞–∂–∞ –æ —à–∫–æ–ª—å–Ω–æ–º –∫–æ–Ω—Ü–µ—Ä—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à–µ–ª 15 —Ñ–µ–≤—Ä–∞–ª—è –≤ –∞–∫—Ç–æ–≤–æ–º –∑–∞–ª–µ —à–∫–æ–ª—ã ‚Ññ12. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –≤—ã—Å—Ç—É–ø–∏–ª–∏ —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∏ —É—á–∏—Ç–µ–ª—è. –í –∫–æ–Ω—Ü–µ—Ä—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —É—á–µ–Ω–∏–∫–∏ 5-11 –∫–ª–∞—Å—Å–æ–≤. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –±—ã–ª–∞ —Ä–∞–¥–æ—Å—Ç–Ω–∞—è –∏ –¥—Ä—É–∂–µ—Å–∫–∞—è. –ù–∞ —Å—Ü–µ–Ω–µ –∏—Å–ø–æ–ª–Ω—è–ª–∏ –ø–µ—Å–Ω–∏, —Ç–∞–Ω—Ü—ã, —Å—Ü–µ–Ω–∫–∏. –û—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏–ª—Å—è –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —É—á–µ–Ω–∏–∫–∏ 9 –∫–ª–∞—Å—Å–∞ —Å—ã–≥—Ä–∞–ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–µ—Å–Ω—é –Ω–∞ –≥–∏—Ç–∞—Ä–µ –∏ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ. –í –∫–æ–Ω—Ü–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–ø–µ–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–µ—Å–Ω—é –æ –¥—Ä—É–∂–±–µ. –ö–æ–Ω—Ü–µ—Ä—Ç –ø–æ–º–æ–≥ —Å–ø–ª–æ—Ç–∏—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –î–æ–±–∞–≤—å –º–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ç–æ–º, –∫–∞–∫ –∏–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å."

‚úÖ –¢–µ–ø–µ—Ä—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞–ø–∏—à–µ—Ç —Å–≤—è–∑–Ω—ã–π –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞! üé¨üé§
"""

checklist_shooting = """
1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ —Å—ä—ë–º–∫–æ–π
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–µ–º—É —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞: –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Å–≤–µ—â–∞–µ—Ç–µ?
‚úÖ –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏, –µ–≥–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö.
‚úÖ –°–æ—Å—Ç–∞–≤—å—Ç–µ –ø–ª–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞: –∫–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞–¥—Ä?
‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é.
‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: –∑–∞—Ä—è–∂–µ–Ω—ã –ª–∏ –∫–∞–º–µ—Ä–∞/—Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å?
‚úÖ –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã (—à—Ç–∞—Ç–∏–≤, –º–∏–∫—Ä–æ—Ñ–æ–Ω, –ø–∞—É—ç—Ä–±–∞–Ω–∫).

2. –°—ä—ë–º–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ
‚úÖ –°–Ω–∏–º–∞–π—Ç–µ –æ–±—â–∏–π –ø–ª–∞–Ω –ª–æ–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∑—Ä–∏—Ç–µ–ª–∏ –ø–æ–Ω—è–ª–∏, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ.
‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª–∏: –∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —ç–º–æ—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é–∏—Ä—É–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤, –≥–æ—Å—Ç–µ–π, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–≤—É–∫: –∏–∑–±–µ–≥–∞–π—Ç–µ —à—É–º–∞, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω.
‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∑–∞–∫–∞–¥—Ä–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å—ä–µ–º–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
‚úÖ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —Å—Ç–∞–±–∏–ª—å–Ω–æ, –Ω–µ –¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π.
‚úÖ –î–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥—É–±–ª–µ–π –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤.
"""

# –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–≤–∞—à–∏ —Å—Å—ã–ª–∫–∏)
resources_text = """
–í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è:
- –û–°–ù–û–í–ù–û–ô –ö–ê–ù–ê–õ –ú–ï–î–ò–ê–¶–ï–ù–¢–†–ê –ú–ê–†–§–ò–ù–û: https://www.youtube.com/@-m50
- –ü–û–õ–ï–ó–ù–´–ô –ë–õ–û–ì: https://www.youtube.com/@%D0%9F%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D1%8B%D0%B9%D0%B1%D0%BB%D0%BE%D0%B3
- –ö–£–•–ù–Ø –ò –õ–Æ–î–ò: https://www.youtube.com/@%D0%9A%D1%83%D1%85%D0%BD%D1%8F%D0%B8%D0%BB%D1%8E%D0%B4%D0%B8
- –°–û–û–ë–©–ï–°–¢–í–û –í –í–ö: https://vk.com/dkmarfino?from=groups
- –°–û–û–ë–©–ï–°–¢–í–û aXIS: https://vk.com/axisskill?from=groups
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ —Å–º–æ—Ç—Ä–∏ ‚Äî —Ç–∞–º –∫—É—á–∞ –∫—Ä—É—Ç—ã—Ö –≤–∏–¥–æ—Å–æ–≤! üöÄ
"""

# –ö—É—Ä—Å—ã aXIS (–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞)
courses_text = """
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç aXIS ‚Äî —ç—Ç–æ –Ω–∞—à–∞ –æ–Ω–ª–∞–π–Ω-—Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: https://artmediaskill.ru/
–í—ã–±–µ—Ä–∏ –ª—é–±–æ–π –∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∏ –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—á—ë—Ç –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –µ—â—ë —á–µ–≥–æ, –ø–∏—à–∏ –ø—Ä—è–º–æ —Ç—É—Ç ‚Äî –ò–ò –ø–æ–¥–±–µ—Ä—ë—Ç –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
"""

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏, –≤–∫–ª—é—á–∞—è —Ç–µ—Å—Ç—ã
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò'), KeyboardButton('–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å—ä–µ–º–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞'))
main_menu.add(KeyboardButton('–¢–µ—Å—Ç –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ'), KeyboardButton('–¢–µ—Å—Ç –ø–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ'))
main_menu.add(KeyboardButton('–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'), KeyboardButton('–ö—É—Ä—Å—ã aXIS'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è onboard –∏ —Ç–µ—Å—Ç–æ–≤ (dict –ø–æ user_id)
user_states = {}
user_data = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –±–∞–ª–ª–æ–≤ —Ç–µ—Å—Ç–∞

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: B, A, C, B, A)
video_questions = [
    ("–í–æ–ø—Ä–æ—Å 1/5: –ß—Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ —É–ª–∏—Ü–µ?", ['A: –î–µ—Ä–∂–∞—Ç—å –∫–∞–º–µ—Ä—É —Ä—É–∫–æ–π', 'B: –®—Ç–∞—Ç–∏–≤ –∏–ª–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä', 'C: –ë–µ–∂–∞—Ç—å —Å –∫–∞–º–µ—Ä–æ–π'], 'B'),
    ("–í–æ–ø—Ä–æ—Å 2/5: –ö–∞–∫–æ–π –ø–ª–∞–Ω —Å—ä—ë–º–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è?", ['A: –û–±—â–∏–π –ø–ª–∞–Ω', 'B: –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω', 'C: –°—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω'], 'A'),
    ("–í–æ–ø—Ä–æ—Å 3/5: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∑–≤—É–∫–æ–º –Ω–∞ —à—É–º–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?", ['A: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —à—É–º', 'B: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω', 'C: –ü–æ–¥–∫–ª—é—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –º–∏–∫—Ä–æ—Ñ–æ–Ω'], 'C'),
    ("–í–æ–ø—Ä–æ—Å 4/5: –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä—è—Å–∫–∏ –≤ –≤–∏–¥–µ–æ?", ['A: –°–Ω–∏–º–∞—Ç—å –Ω–∞ –±–µ–≥—É', 'B: –î—ã—à–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ –¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ', 'C: –î–µ–ª–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã'], 'B'),
    ("–í–æ–ø—Ä–æ—Å 5/5: –ó–∞—á–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å—ä—ë–º–∫–æ–π?", ['A: –ß—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –∑–∞—Ä—è–¥–∫—É –∏ –ø–∞–º—è—Ç—å', 'B: –ß—Ç–æ–±—ã —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è', 'C: –ß—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –∫—Ä—É—Ç–æ'], 'A')
]

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: C, B, A, C, B)
journalism_questions = [
    ("–í–æ–ø—Ä–æ—Å 1/5: –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø—Ä–∞–≤–∏–ª–æ 5W –¥–ª—è —Å—Ç–∞—Ç—å–∏?", ['A: Who, What, When, Where, Why', 'B: –¢–æ–ª—å–∫–æ Who –∏ What', 'C: Who, What, When, Where, Why'], 'C'),
    ("–í–æ–ø—Ä–æ—Å 2/5: –ö–∞–∫ –ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞?", ['A: –î–ª–∏–Ω–Ω—ã–π –∏ —Å–∫—É—á–Ω—ã–π', 'B: –ö—Ä–∞—Ç–∫–∏–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π', 'C: –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'], 'B'),
    ("–í–æ–ø—Ä–æ—Å 3/5: –ß—Ç–æ —Ç–∞–∫–æ–µ –∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç?", ['A: –ì–æ–ª–æ—Å –∑–∞ –∫–∞–¥—Ä–æ–º, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ–±—ã—Ç–∏–µ', 'B: –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤—å—é', 'C: –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ'], 'A'),
    ("–í–æ–ø—Ä–æ—Å 4/5: –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é?", ['A: –ù–µ –¥—É–º–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö', 'B: –ó–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã', 'C: –°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ'], 'C'),
    ("–í–æ–ø—Ä–æ—Å 5/5: –ó–∞—á–µ–º –æ–ø–∏—Å—ã–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Ç–µ–∫—Å—Ç–µ?", ['A: –ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', 'B: –ß—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –≤–æ–≤–ª–µ—á—å —á–∏—Ç–∞—Ç–µ–ª—è', 'C: –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ'], 'B')
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤ –±–∞–∑–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_in_db(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
def show_menu_and_greeting(message):
    user_id = message.chat.id
    bot.send_message(user_id, '–ô–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–∏–π! –Ø —Ç–≤–æ–π —Å—É–ø–µ—Ä-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ä—Ñ–∏–Ω–æ. –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω–∞ —Ü–µ–ª–∞—è –±–∞–Ω–¥–∞ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤: —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è —Å—ä—ë–º–∫–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤, —Ç–µ—Å—Ç—ã –Ω–∞ —É—Ä–æ–≤–µ–Ω—å, —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∫—É—Ä—Å—ã. –°–º–æ—Ç—Ä–∏ –≤ –º–µ–Ω—é –Ω–∏–∂–µ! –ò–ò –ø–æ–¥–±–µ—Ä—ë—Ç –¥–ª—è —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, –∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ–º–Ω–∏, –Ω–∞—à–∞ —Å —Ç–æ–±–æ–π —Ü–µ–ª—å ‚Äî —Å–Ω–∏–º–∞—Ç—å —É–º–æ–ø–æ–º—Ä–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–æ—Å–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç –º–æ—Ä–µ –ª–∞–π–∫–æ–≤ –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤. –î–∞–≤–∞–π —Ç–≤–æ—Ä–∏—Ç—å —à–µ–¥–µ–≤—Ä—ã! üé•üî•', reply_markup=main_menu)

# ======================== –ù–û–í–û–ï: –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–µ–ª–∏ (—É—á–∏—Ç–µ–ª—å/—É—á–µ–Ω–∏–∫–∏) ========================

@bot.message_handler(commands=['week'])
def cmd_week(message):
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏. –£—á–∏—Ç–µ–ª—å –∑–∞–¥–∞—ë—Ç –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /setweek")
        return
    row = get_task(wid)
    if not row:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
        return
    bot.send_message(message.chat.id, format_task_text(row))

@bot.message_handler(commands=['myrank'])
def cmd_myrank(message):
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return
    pts = get_points(message.from_user.id, wid)
    bot.send_message(message.chat.id, f"üë§ –¢–≤–æ–π —Å—á—ë—Ç –∑–∞ {wid}: {pts} –æ—á–∫.")

@bot.message_handler(commands=['rank'])
def cmd_rank(message):
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return
    rows = top_week(wid, 10)
    if not rows:
        bot.send_message(message.chat.id, f"–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ {wid}. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return
    medals = ["ü•á","ü•à","ü•â"]
    lines = []
    for i,(uid,pts) in enumerate(rows, start=1):
        mark = medals[i-1] if i<=3 else f"{i}."
        lines.append(f"{mark} ID {uid} ‚Äî {pts} –æ—á–∫.")
    bot.send_message(message.chat.id, f"üèÜ –¢–æ–ø-10 –∑–∞ {wid}:\n" + "\n".join(lines))

# –£—á–∏—Ç–µ–ª—å: –∑–∞–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ (—Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∞ –∏ —Ç.–ø.)
@bot.message_handler(commands=['setweek'])
def cmd_setweek(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    text = message.text[len('/setweek'):].strip()
    if not text:
        bot.send_message(message.chat.id,
            "–§–æ—Ä–º–∞—Ç:\n/setweek 2025-W40 | –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | https://—Å—Å—ã–ª–∫–∞ | –¥–æ —Å—É–±–±–æ—Ç—ã\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è: /kind media –∏–ª–∏ /kind quiz –∏–ª–∏ /kind minitest")
        return
    parts = [p.strip() for p in text.split('|')]
    if len(parts) < 3:
        bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —á–∞—Å—Ç–∏: WEEK_ID | –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | [–°—Å—ã–ª–∫–∞] | [–î–µ–¥–ª–∞–π–Ω]")
        return
    week_id = parts[0]
    title = parts[1]
    descr = parts[2]
    link = parts[3] if len(parts)>=4 else ""
    deadline = parts[4] if len(parts)>=5 else ""
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é kind=media (–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å /kind ...)
    upsert_task(week_id, 'media', title, descr, link, deadline)
    set_current_week(week_id)
    bot.send_message(message.chat.id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ {week_id}.\n–¢–∏–ø: media (–º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å /kind quiz|minitest)\n\n"
                                      f"{format_task_text(get_task(week_id))}")

@bot.message_handler(commands=['kind'])
def cmd_kind(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    text = message.text.strip().split()
    if len(text)<2 or text[1] not in ('media','quiz','minitest'):
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π: /kind media  –∏–ª–∏  /kind quiz  –∏–ª–∏  /kind minitest")
        return
    if set_kind(text[1]):
        bot.send_message(message.chat.id, f"‚úÖ –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {text[1]}")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –Ω–µ–¥–µ–ª—é: /setweek ...")

# –£—á–∏—Ç–µ–ª—å: —Ä–∞–∑–æ—Å–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –≤—Å–µ–º
@bot.message_handler(commands=['sendweek'])
def cmd_sendweek(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏. /setweek")
        return
    row = get_task(wid)
    if not row:
        bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
        return
    text = "üéÆ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏!\n\n" + format_task_text(row)
    ids = users_all_ids()
    sent = 0
    for uid in ids:
        try:
            bot.send_message(uid, text)
            sent += 1
        except:
            pass
    bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —É—á–µ–Ω–∏–∫–∞–º.")

# –£—á–∏—Ç–µ–ª—å: –Ω–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏ –≤—Ä—É—á–Ω—É—é
@bot.message_handler(commands=['award'])
def cmd_award(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    parts = message.text.strip().split()
    if len(parts)<3:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /award <user_id> <–æ—á–∫–∏>")
        return
    try:
        uid = int(parts[1]); pts = int(parts[2])
    except:
        bot.send_message(message.chat.id, "user_id –∏ –æ—á–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏. /setweek")
        return
    add_points(uid, wid, pts)
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {pts} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {uid} –∑–∞ {wid}.")

# –£—á–∏—Ç–µ–ª—å: –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ (–¢–û–ü –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å)
@bot.message_handler(commands=['summary'])
def cmd_summary(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return
    rows = top_week(wid, 10)
    if not rows:
        bot.send_message(message.chat.id, f"–ó–∞ {wid} –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.")
        return
    medals = ["ü•á","ü•à","ü•â"]
    lines = []
    for i,(uid,pts) in enumerate(rows, start=1):
        mark = medals[i-1] if i<=3 else f"{i}."
        lines.append(f"{mark} ID {uid} ‚Äî {pts} –æ—á–∫.")
    text = f"üé∫ –ò–†–ê!!! –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ {wid}\n\n" + "\n".join(lines) + "\n\n‚≠ê –ó–≤–µ–∑–¥–∞ –Ω–µ–¥–µ–ª–∏ ‚Äî ID " + str(rows[0][0]) + "!"
    # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
    ids = users_all_ids()
    for uid in ids:
        try:
            bot.send_message(uid, text)
        except:
            pass
    bot.send_message(message.chat.id, "–ò—Ç–æ–≥–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã. ‚≠ê")

# –ö–≤–∏–∑ –Ω–µ–¥–µ–ª–∏: –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (—É—á–∏—Ç–µ–ª—å) –∏ –ø—Ä–æ–π—Ç–∏ (—É—á–µ–Ω–∏–∫–∏)
@bot.message_handler(commands=['setquiz'])
def cmd_setquiz(message):
    if message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª—è.")
        return
    # –§–æ—Ä–º–∞—Ç: /setquiz –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç A | –í–∞—Ä–∏–∞–Ω—Ç B | –í–∞—Ä–∏–∞–Ω—Ç C | 0
    txt = message.text[len('/setquiz'):].strip()
    parts = [p.strip() for p in txt.split('|')]
    if len(parts) < 5:
        bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /setquiz –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç A | –í–∞—Ä–∏–∞–Ω—Ç B | –í–∞—Ä–∏–∞–Ω—Ç C | –∏–Ω–¥–µ–∫—Å_–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ(0..2)")
        return
    q, a, b, c, idx = parts[0], parts[1], parts[2], parts[3], parts[4]
    try:
        idx = int(idx)
        if idx not in (0,1,2): raise ValueError
    except:
        bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî —á–∏—Å–ª–æ 0..2 (–∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ).")
        return
    if not set_quiz(q, a, b, c, idx):
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –Ω–µ–¥–µ–ª—é: /setweek ... –∏ —Ç–∏–ø: /kind quiz")
        return
    bot.send_message(message.chat.id, "‚úÖ –ö–≤–∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –£—á–µ–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–π—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /quiz")

@bot.message_handler(commands=['quiz'])
def cmd_quiz(message):
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return
    row = get_task(wid)
    if not row or row[1] != 'quiz' or not row[6]:
        bot.send_message(message.chat.id, "–ö–≤–∏–∑ –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏ —É—á–∏—Ç–µ–ª—è /kind quiz –∏ /setquiz ...")
        return
    _,_,_,_,_,_, qq, qa, qb, qc, correct = row
    try:
        bot.send_poll(
            message.chat.id,
            question="üß† –ö–≤–∏–∑ –Ω–µ–¥–µ–ª–∏: " + qq,
            options=[qa, qb, qc],
            type="quiz",
            correct_option_id=correct,
            is_anonymous=False,
            explanation="–ü—Ä–æ–≤–µ—Ä—å –Ω–∞—à —É—Ä–æ–∫ ‚Äî —Ç–∞–º –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ üòâ"
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏–∑: {e}")

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–≤–∏–∑—ã –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    user_id = poll_answer.user.id
    option_ids = poll_answer.option_ids
    if not option_ids:
        return
    wid = get_current_week()
    if not wid:
        return
    row = get_task(wid)
    if not row or row[1] != 'quiz' or row[10] is None:
        return
    correct = row[10]
    chosen = option_ids[0]
    if chosen == correct and not already_awarded(user_id, wid, 'quiz'):
        add_points(user_id, wid, POINTS_QUIZ_RIGHT)
        mark_awarded(user_id, wid, 'quiz')
        try:
            bot.send_message(user_id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{POINTS_QUIZ_RIGHT} –æ—á–∫. –ü–æ—Å–º–æ—Ç—Ä–∏ /myrank")
        except:
            pass

# –ú–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–µ–¥–µ–ª–∏ (3 –≤–æ–ø—Ä–æ—Å–∞) ‚Äî –∑–∞–ø—É—Å–∫
@bot.message_handler(commands=['minitest'])
def cmd_minitest(message):
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏.")
        return
    row = get_task(wid)
    if not row or row[1] != 'minitest':
        bot.send_message(message.chat.id, "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ—Å–∏ —É—á–∏—Ç–µ–ª—è /kind minitest")
        return
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    sql("INSERT OR REPLACE INTO weekly_test_states(user_id,week_id,q_index,score) VALUES(?,?,0,0)",
        (message.from_user.id, wid))
    q, opts, _ = MINITEST_QUESTIONS[0]
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for o in opts: kb.add(KeyboardButton(o))
    bot.send_message(message.chat.id, "üìù –ú–∏–Ω–∏-—Ç–µ—Å—Ç (3 –≤–æ–ø—Ä–æ—Å–∞). –í–æ–ø—Ä–æ—Å 1/3:\n" + q, reply_markup=kb)

# –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–æ–≤ –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ –æ–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä ‚Äî –æ–Ω –Ω–∏–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ—Ç)

# ========================= –ü–†–ò–Å–ú –ú–ï–î–ò–ê #challenge (–¥–ª—è media-–Ω–µ–¥–µ–ª–∏) =========================
@bot.message_handler(content_types=['photo','video'])
def handle_media_challenge(message):
    caption = (message.caption or "").lower()
    if "#challenge" not in caption:
        return  # –ø—É—Å—Ç—å –¥–∞–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è —Ç–≤–æ–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    wid = get_current_week()
    if not wid:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ—Å–∏ —É—á–∏—Ç–µ–ª—è /setweek")
        return
    row = get_task(wid)
    if not row or row[1] != 'media':
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –Ω–µ–¥–µ–ª—è –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∞ ¬´—Å—ä—ë–º–∫–∞¬ª. –ñ–º–∏ /week, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")
        return

    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        ftype = 'photo'
    else:
        file_id = message.video.file_id
        ftype = 'video'

    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sql("""INSERT INTO weekly_submissions(user_id,week_id,file_id,file_type,caption,ts)
           VALUES(?,?,?,?,?,?)""", (message.from_user.id, wid, file_id, ftype, message.caption or "", ts))

    # –ø–µ—Ä–≤–æ–µ —É—á–∞—Å—Ç–∏–µ ‚Äî –æ—á–∫–∏
    if not already_awarded(message.from_user.id, wid, 'media'):
        add_points(message.from_user.id, wid, POINTS_MEDIA_FIRST)
        mark_awarded(message.from_user.id, wid, 'media')
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! +{POINTS_MEDIA_FIRST} –æ—á–∫. –ü–æ—Å–º–æ—Ç—Ä–∏ /myrank")
    else:
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –†–∞–±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –û—á–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã. /myrank")

# ============================ –¢–í–û–ô –ò–°–•–û–î–ù–´–ô –ö–û–î –ù–ò–ñ–ï ‚Äî –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ============================

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    if is_user_in_db(user_id):
        show_menu_and_greeting(message)
        return

    bot.send_message(user_id, '–ô–æ, –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–∞ –ú–∞—Ä—Ñ–∏–Ω–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ù–∞–ø–∏—à–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)')
    user_states[user_id] = 'waiting_name'
    user_data[user_id] = {'name': '', 'experience': '', 'interests': []}

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    user_id = message.chat.id
    if user_id != ADMIN_ID:
        bot.send_message(user_id, '–¢—ã –Ω–µ –∞–¥–º–∏–Ω! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.')
        return

    text = message.text.replace('/broadcast', '').strip()
    if not text:
        bot.send_message(user_id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast, –Ω–∞–ø—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞!')
        return

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    sent_count = 0
    for row in users:
        try:
            bot.send_message(row[0], text)
            sent_count += 1
        except:
            pass  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º

    bot.send_message(user_id, f'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} —É—á–µ–Ω–∏–∫–∞–º!')

@bot.message_handler(commands=['myid'])
def myid(message):
    bot.send_message(message.chat.id, f'–¢–≤–æ–π Telegram ID: {message.chat.id}')

@bot.message_handler(commands=['listusers'])
def list_users(message):
    user_id = message.chat.id
    if user_id != ADMIN_ID:
        bot.send_message(user_id, '–¢—ã –Ω–µ –∞–¥–º–∏–Ω! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.')
        return

    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    if not users:
        bot.send_message(user_id, '–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.')
        return

    list_text = "–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for row in users:
        list_text += f"User ID: {row[0]}, –ò–º—è: {row[1]}, –û–ø—ã—Ç: {row[2]}, –ò–Ω—Ç–µ—Ä–µ—Å—ã: {row[3]}\n\n"
    bot.send_message(user_id, list_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text.strip()

    # ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ (–µ—Å–ª–∏ –∏–¥—ë—Ç) ====
    wid = get_current_week()
    if wid:
        st = sql("SELECT q_index,score FROM weekly_test_states WHERE user_id=? AND week_id=?", (user_id, wid))
        if st:
            q_index, score = st
            # –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "A: ..." / "B: ..." / "C: ..."
            if text and text[0] in ('A','B','C'):
                correct = MINITEST_QUESTIONS[q_index][2]
                if text[0] == correct:
                    score += 1
                q_index += 1
                if q_index < 3:
                    sql("UPDATE weekly_test_states SET q_index=?,score=? WHERE user_id=? AND week_id=?",
                        (q_index, score, user_id, wid))
                    q, opts, _ = MINITEST_QUESTIONS[q_index]
                    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    for o in opts: kb.add(KeyboardButton(o))
                    bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å {q_index+1}/3:\n{q}", reply_markup=kb)
                    return
                else:
                    # –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç
                    sql("DELETE FROM weekly_test_states WHERE user_id=? AND week_id=?", (user_id, wid))
                    if not already_awarded(user_id, wid, 'minitest'):
                        pts = POINTS_MINITEST.get(score, 0)
                        add_points(user_id, wid, pts)
                        mark_awarded(user_id, wid, 'minitest')
                        bot.send_message(user_id, f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {score}/3. +{pts} –æ—á–∫. /myrank")
                    else:
                        bot.send_message(user_id, f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {score}/3. –û—á–∫–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª–∏—Å—å —Ä–∞–Ω–µ–µ. /myrank")
                    return

    # ==== –¢–í–û–ô –û–ù–ë–û–†–î–ò–ù–ì ====
    if user_id in user_states and 'waiting_' in user_states[user_id]:
        state = user_states[user_id]

        if state == 'waiting_name':
            user_data[user_id]['name'] = text
            yes_no_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            yes_no_menu.add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ—Ç'))
            bot.send_message(user_id, f'–ö—Ä—É—Ç–æ, {text}! –†–∞–∑—Ä–µ—à–∞–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à—É –±–∞–∑—É —É—á–µ–Ω–∏–∫–æ–≤? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–µ–±–µ –Ω—É–∂–Ω—ã, –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É. –ë–µ–∑ —Å–ø–∞–º–∞, –æ–±–µ—â–∞—é! üòé', reply_markup=yes_no_menu)
            user_states[user_id] = 'waiting_permission'

        elif state == 'waiting_permission':
            if text.lower() == '–¥–∞':
                experience_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                experience_menu.add(KeyboardButton('–î–æ 1 –≥–æ–¥–∞'), KeyboardButton('–ë–æ–ª—å—à–µ 1 –≥–æ–¥–∞'))
                bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–µ–±–æ–ª—å—à–∞—è –∞–Ω–∫–µ—Ç–∞ ‚Äî –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –°–∫–æ–ª—å–∫–æ —Ç—ã –ø–æ—Å–µ—â–∞–µ—à—å –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä –ú–∞—Ä—Ñ–∏–Ω–æ?', reply_markup=experience_menu)
                user_states[user_id] = 'waiting_experience'
            elif text.lower() == '–Ω–µ—Ç':
                del user_states[user_id]
                del user_data[user_id]
                bot.send_message(user_id, '–û–∫, –±–µ–∑ –ø—Ä–æ–±–ª–µ–º! –î–∞–≤–∞–π —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É.')
                show_menu_and_greeting(message)
            else:
                bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".')

        elif state == 'waiting_experience':
            user_data[user_id]['experience'] = text
            interests_menu = ReplyKeyboardMarkup(resize_keyboard=True)
            interests_menu.add(KeyboardButton('–°–Ω–∏–º–∞—Ç—å –≤–∏–¥–µ–æ'), KeyboardButton('–†–µ–∂–∏—Å—Å—É—Ä–∞'))
            interests_menu.add(KeyboardButton('–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º'), KeyboardButton('–ë–ª–æ–≥–∏–Ω–≥'))
            interests_menu.add(KeyboardButton('–ù–µ–π—Ä–æ—Å–µ—Ç–∏'), KeyboardButton('–ì–æ—Ç–æ–≤–æ'))
            bot.send_message(user_id, '–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ")', reply_markup=interests_menu)
            user_states[user_id] = 'waiting_interests'

        elif state == 'waiting_interests':
            if text == '–ì–æ—Ç–æ–≤–æ':
                interests_str = ', '.join(user_data[user_id]['interests'])
                summary = f"–ü—Ä–æ–≤–µ—Ä—å –∞–Ω–∫–µ—Ç—É:\n–ò–º—è: {user_data[user_id]['name']}\n–û–ø—ã—Ç: {user_data[user_id]['experience']}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_str if interests_str else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
                confirm_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                confirm_menu.add(KeyboardButton('–î–∞, –≤–µ—Ä–Ω–æ'), KeyboardButton('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'))
                bot.send_message(user_id, summary + '\n–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=confirm_menu)
                user_states[user_id] = 'waiting_confirm'
            else:
                if text not in user_data[user_id]['interests']:
                    user_data[user_id]['interests'].append(text)
                bot.send_message(user_id, f'–î–æ–±–∞–≤–∏–ª: {text}. –í—ã–±–µ—Ä–∏ –µ—â—ë –∏–ª–∏ "–ì–æ—Ç–æ–≤–æ".')

        elif state == 'waiting_confirm':
            if text == '–î–∞, –≤–µ—Ä–Ω–æ':
                interests_str = ', '.join(user_data[user_id]['interests'])
                cursor.execute("INSERT INTO users (user_id, name, experience, interests) VALUES (?, ?, ?, ?)",
                               (user_id, user_data[user_id]['name'], user_data[user_id]['experience'], interests_str))
                conn.commit()
                bot.send_message(user_id, '–°—É–ø–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–µ–±—è.')
                del user_states[user_id]
                del user_data[user_id]
                show_menu_and_greeting(message)
            elif text == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
                bot.send_message(user_id, '–û–∫, –¥–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
                user_states[user_id] = 'waiting_name'
                user_data[user_id] = {'name': '', 'experience': '', 'interests': []}
            else:
                bot.send_message(user_id, '–í—ã–±–µ—Ä–∏ "–î–∞, –≤–µ—Ä–Ω–æ" –∏–ª–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ".')

        return

    # ==== –¢–í–û–ò –¢–ï–°–¢–´ ====
    if text in ['–¢–µ—Å—Ç –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ', '–¢–µ—Å—Ç –ø–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ']:
        if not is_user_in_db(user_id):
            bot.send_message(user_id, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è! –ù–∞–ø–∏—à–∏ /start –∏ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É.')
            return

        if text == '–¢–µ—Å—Ç –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ':
            user_states[user_id] = 'test_video_q1'
            user_data[user_id] = {'score': 0, 'questions': video_questions}
        else:
            user_states[user_id] = 'test_journalism_q1'
            user_data[user_id] = {'score': 0, 'questions': journalism_questions}

        q, options, _ = user_data[user_id]['questions'][0]
        options_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        options_menu.add(*[KeyboardButton(opt) for opt in options])
        bot.send_message(user_id, q, reply_markup=options_menu)
        return

    if user_id in user_states and 'test_' in user_states[user_id]:
        state = user_states[user_id]
        test_type, q_num = state.split('_q')
        q_index = int(q_num) - 1
        questions = user_data[user_id]['questions']
        _, _, correct = questions[q_index]

        answer_letter = text[0]  # A, B –∏–ª–∏ C
        if answer_letter == correct:
            user_data[user_id]['score'] += 1

        if q_index < 4:  # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            next_state = f'test_{test_type}_q{q_index + 2}'
            user_states[user_id] = next_state
            q, options, _ = questions[q_index + 1]
            options_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            options_menu.add(*[KeyboardButton(opt) for opt in options])
            bot.send_message(user_id, q, reply_markup=options_menu)
        else:  # –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞
            score = user_data[user_id]['score']
            if score <= 2:
                verdict = "–¢—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å, –Ω–æ –≤ –Ω–∞—à–µ–º –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–µ —Ç—ã –≤—Å–µ–º—É –Ω–∞—É—á–∏—à—å—Å—è –∏ —Å—Ç–∞–Ω–µ—à—å –ø—Ä–æ—Ñ–∏! üòä –ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ —É—Ä–æ–∫–∏!"
            elif score <= 4:
                verdict = "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏ ‚Äî –ø—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –≤ –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä, –∏ –≤—Å—ë –±—É–¥–µ—Ç —Å—É–ø–µ—Ä!"
            else:
                verdict = "–°—É–ø–µ—Ä, —Ç—ã —É–∂–µ –º–∞—Å—Ç–µ—Ä! –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞–π –∫—Ä—É—Ç—ã–µ –≤–∏–¥–µ–æ. üé•"

            bot.send_message(user_id, f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/5. {verdict}', reply_markup=main_menu)
            del user_states[user_id]
            del user_data[user_id]

        return

    # ==== –¢–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ====
    if text == '–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò':
        bot.send_message(user_id, checklist_text_ai)
    elif text == '–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å—ä–µ–º–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞':
        bot.send_message(user_id, checklist_shooting)
    elif text == '–ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã':
        bot.send_message(user_id, resources_text)
    elif text == '–ö—É—Ä—Å—ã aXIS':
        bot.send_message(user_id, courses_text)
    else:
        # –ò–Ω–∞—á–µ ‚Äî –ò–ò
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —É—á–∏—Ç–µ–ª—å –º–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–∞–ø–æ–º–∏–Ω–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ —É—Ä–æ–∫–æ–≤ –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ, –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–æ–≤, –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –Ω–æ –Ω–µ –¥–∞–≤–∞–π –æ–ø–∞—Å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏ '–≠—Ç–æ –Ω–µ –ø–æ –Ω–∞—à–∏–º —É—Ä–æ–∫–∞–º, —Å–ø—Ä–æ—Å–∏ –æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ –∏–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö!'."},
                    {"role": "user", "content": text}
                ]
            )
            ai_answer = response.choices[0].message.content
            bot.send_message(user_id, ai_answer)
        except Exception as e:
            bot.send_message(user_id, f'–ò–∑–≤–∏–Ω–∏, –æ—à–∏–±–∫–∞ —Å –ò–ò: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –∫–ª—é—á.')

# –ó–∞–ø—É—Å–∫ polling
if __name__ == '__main__':
    bot.polling(none_stop=True)
