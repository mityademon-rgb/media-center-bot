import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import os
from openai import OpenAI
import sqlite3

# –¢–æ–∫–µ–Ω –∏ OpenAI –∫–ª–∏–µ–Ω—Ç
bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN'])
client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

# –ê–¥–º–∏–Ω ID (–≤–∞—à Telegram ID)
ADMIN_ID = 397724997

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite (–±–∞–∑–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤)
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (user_id INTEGER PRIMARY KEY, name TEXT, experience TEXT, interests TEXT)''')
conn.commit()

# –ß–µ–∫-–ª–∏—Å—Ç—ã
checklist_text_ai = """..."""  # –æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
checklist_shooting = """...""" # –æ—Å—Ç–∞–≤–∏–ª —Ç–≤–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
resources_text = """..."""
courses_text = """..."""

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton('üé¨ –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–¥—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ò–ò'), KeyboardButton('üìπ –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Å—ä–µ–º–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞–∂–∞'))
main_menu.add(KeyboardButton('üéØ –¢–µ—Å—Ç –ø–æ –≤–∏–¥–µ–æ—Å—ä—ë–º–∫–µ'), KeyboardButton('üì∞ –¢–µ—Å—Ç –ø–æ –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ'))
main_menu.add(KeyboardButton('üé• –£—Ä–æ–∫: –ê–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞'))  # ‚úÖ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
main_menu.add(KeyboardButton('üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'), KeyboardButton('üìö –ö—É—Ä—Å—ã aXIS'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
user_data = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å)
video_questions = [...]
journalism_questions = [...]

# ‚úÖ –í–æ–ø—Ä–æ—Å—ã –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É
operator_questions = [
    ("–í–æ–ø—Ä–æ—Å 1/3: –ß—Ç–æ —Ç–∞–∫–æ–µ '–ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π'?", 
     ["A: –î–µ–ª–∏–º –∫–∞–¥—Ä –Ω–∞ 3 —á–∞—Å—Ç–∏ –∏ —Å—Ç–∞–≤–∏–º –æ–±—ä–µ–∫—Ç –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª–∏–Ω–∏–π", 
      "B: –ù—É–∂–Ω–æ —Å–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –¥—É–±–ª—è", 
      "C: –°—Ç–∞–≤–∏–º –≥–µ—Ä–æ—è —Å—Ç—Ä–æ–≥–æ –≤ —Ü–µ–Ω—Ç—Ä"], 'A'),

    ("–í–æ–ø—Ä–æ—Å 2/3: –ö–∞–∫–æ–π —Å–≤–µ—Ç —Å–¥–µ–ª–∞–µ—Ç –ª–∏—Ü–æ '—Å—Ç—Ä–∞—à–Ω—ã–º'?", 
     ["A: –°–±–æ–∫—É", 
      "B: –°–≤–µ—Ä—Ö—É", 
      "C: –°–Ω–∏–∑—É"], 'C'),

    ("–í–æ–ø—Ä–æ—Å 3/3: –ß—Ç–æ –ª—É—á—à–µ ‚Äî –∑—É–º –∏–ª–∏ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ?", 
     ["A: –í—Å–µ–≥–¥–∞ –∑—É–º", 
      "B: –ü–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ", 
      "C: –ù–µ –≤–∞–∂–Ω–æ"], 'B'),
]

# ‚úÖ –°–ª–∞–π–¥—ã —É—Ä–æ–∫–∞
lesson_operator = [
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_41_24-300x200.png",
        "text": "üìê –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ ‚Äî –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π. üëâ –ó–∞–¥–∞–Ω–∏–µ: —Å–Ω–∏–º–∏ —Å–æ—Å–µ–¥–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É —Ç—Ä–µ—Ç–µ–π!"
    },
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_43_48-300x200.png",
        "text": "üé¨ –ö—Ä—É–ø–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∞: –æ–±—â–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –∫—Ä—É–ø–Ω—ã–π. üëâ –ó–∞–¥–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π —Ç—Ä–∏ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: –æ–±—â–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –∫—Ä—É–ø–Ω—ã–π."
    },
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_44_29-300x200.png",
        "text": "üì∑ –£–≥–æ–ª —Å—ä—ë–º–∫–∏: —Å–≤–µ—Ä—Ö—É, —É—Ä–æ–≤–µ–Ω—å –≥–ª–∞–∑, —Å–Ω–∏–∑—É. üëâ –ó–∞–¥–∞–Ω–∏–µ: –ø–æ–ø—Ä–æ–±—É–π —Å–Ω—è—Ç—å –∏–≥—Ä—É—à–∫—É —Å —Ç—Ä—ë—Ö —É–≥–ª–æ–≤."
    },
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_47_04-300x200.png",
        "text": "üí° –°–≤–µ—Ç: —Å–±–æ–∫—É (–∫—Ä–∞—Å–∏–≤–æ), —Å–≤–µ—Ä—Ö—É (—Ä–æ–≤–Ω–æ), —Å–Ω–∏–∑—É (—Å—Ç—Ä–∞—à–Ω–æ). üëâ –ó–∞–¥–∞–Ω–∏–µ: –ø–æ–¥—Å–≤–µ—Ç–∏ –ª–∏—Ü–æ –¥—Ä—É–≥–∞ —Ñ–æ–Ω–∞—Ä–∏–∫–æ–º —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω."
    },
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_49_33-300x200.png",
        "text": "üé• –î–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã: —Å—Ç–∞—Ç–∏–∫–∞, –ø–∞–Ω–æ—Ä–∞–º–∞, –Ω–∞–µ–∑–¥. üëâ –ó–∞–¥–∞–Ω–∏–µ: —Å–Ω–∏–º–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å –ø–∞–Ω–æ—Ä–∞–º–æ–π."
    },
    {
        "img": "https://artmediaskill.ru/wp-content/uploads/2025/10/ChatGPT-Image-1-%D0%BE%D0%BA%D1%82.-2025-%D0%B3.-17_53_17-300x300.png",
        "text": "‚ú® –õ–∞–π—Ñ—Ö–∞–∫–∏: –Ω–µ –∑—É–º—å ‚Äî –ø–æ–¥—Ö–æ–¥–∏; –∫–∞–º–µ—Ä–∞ –±–ª–∏–∂–µ –∫ —Ç–µ–ª—É; —Ñ–æ–Ω –≤–∞–∂–µ–Ω; —Ñ–æ–∫—É—Å –Ω–∞ –≥–ª–∞–∑–∞. üëâ –ó–∞–¥–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º!"
    }
]

# ===== –°–¢–ê–†–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ (is_user_in_db, start, broadcast –∏ —Ç.–¥.) –ù–ï –¢–†–û–ì–ê–ï–ú =====

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text.strip()

    # --- –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–¢–ê–í–õ–Ø–ï–ú –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # ...
    # ...

    # ‚úÖ –ù–æ–≤—ã–π —É—Ä–æ–∫
    if text == 'üé• –£—Ä–æ–∫: –ê–∑—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞':
        for slide in lesson_operator:
            try:
                bot.send_photo(user_id, slide["img"], caption=slide["text"])
            except:
                bot.send_message(user_id, slide["text"])
        bot.send_message(user_id, "üéØ –£—Ä–æ–∫ –∑–∞–∫–æ–Ω—á–µ–Ω! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞–Ω–∏—è ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç.")
        user_states[user_id] = 'test_operator_q1'
        user_data[user_id] = {'score': 0, 'questions': operator_questions}

        # –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        q, options, _ = operator_questions[0]
        options_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        options_menu.add(*[KeyboardButton(opt) for opt in options])
        bot.send_message(user_id, q, reply_markup=options_menu)
        return

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞
    if user_id in user_states and 'test_operator' in user_states[user_id]:
        state = user_states[user_id]
        q_num = int(state.split('_q')[1])
        q_index = q_num - 1
        questions = user_data[user_id]['questions']
        _, _, correct = questions[q_index]

        answer_letter = text[0]
        if answer_letter == correct:
            user_data[user_id]['score'] += 1

        if q_index < len(questions) - 1:
            user_states[user_id] = f'test_operator_q{q_index+2}'
            q, options, _ = questions[q_index+1]
            options_menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            options_menu.add(*[KeyboardButton(opt) for opt in options])
            bot.send_message(user_id, q, reply_markup=options_menu)
        else:
            score = user_data[user_id]['score']
            verdict = "–¢—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å üé•, –Ω–æ —É–∂–µ –∫—Ä—É—Ç–æ!" if score <=1 else "–û—Ç–ª–∏—á–Ω–æ! –£ —Ç–µ–±—è –≥–ª–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ üëÅ" if score==2 else "üî• –ë—Ä–∞–≤–æ! –¢—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –≥–µ–Ω–∏–π!"
            bot.send_message(user_id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/3. {verdict}', reply_markup=main_menu)
            del user_states[user_id]
            del user_data[user_id]
        return

    # --- –û–°–¢–ê–õ–¨–ù–û–ï (—á–µ–∫-–ª–∏—Å—Ç—ã, —Ç–µ—Å—Ç—ã, –ò–ò-–æ—Ç–≤–µ—Ç—ã) –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è ---
    # ...
    # ...

# –ó–∞–ø—É—Å–∫ polling
if __name__ == '__main__':
    bot.polling(none_stop=True)
